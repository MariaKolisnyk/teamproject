import axiosInstance from '../utils/axiosInstance';

/**
 * üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –µ–Ω–¥–ø–æ—ñ–Ω—Ç: `/order/`
 */
export const getOrders = async () => {
  try {
    const response = await axiosInstance.get('/order/');
    return response.data || []; // –£–Ω–∏–∫–Ω–µ–Ω–Ω—è `undefined`
  } catch (error: any) {
    console.error('‚ùå Error fetching orders:', error.message);
    return [];
  }
};

/**
 * üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –µ–Ω–¥–ø–æ—ñ–Ω—Ç: `/order/{orderId}/`
 * @param orderId ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getOrderById = async (orderId: number) => {
  try {
    const response = await axiosInstance.get(`/order/${orderId}/`);
    return response.data || null;
  } catch (error: any) {
    console.error(`‚ùå Error fetching order with ID ${orderId}:`, error.message);
    return null;
  }
};

/**
 * üîπ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –µ–Ω–¥–ø–æ—ñ–Ω—Ç: `/order/create/`
 * @param orderData –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const createOrder = async (orderData: Record<string, any>) => {
  try {
    const response = await axiosInstance.post('/order/create/', orderData);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error creating order:', error.message);
    throw error;
  }
};

/**
 * üîπ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –µ–Ω–¥–ø–æ—ñ–Ω—Ç: `/order/{orderId}/`
 * @param orderId ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @param status –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const updateOrderStatus = async (orderId: number, status: string) => {
  try {
    const response = await axiosInstance.put(`/order/${orderId}/`, { status });
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error updating order status:', error.message);
    throw error;
  }
};

/**
 * üîπ –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –µ–Ω–¥–ø–æ—ñ–Ω—Ç: `/order/{orderId}/cancel/`
 * @param orderId ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const cancelOrder = async (orderId: number) => {
  try {
    const response = await axiosInstance.post(`/order/${orderId}/cancel/`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error canceling order:', error.message);
    throw error;
  }
};
